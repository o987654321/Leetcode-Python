fn longest_palindrome(s: String) -> String {
    let chars: Vec<char> = s.chars().collect();
    let mut start = 0;
    let mut end = 0;

    for i in 0..chars.len() {
        let len1 = expand_from_center(&chars, i, i);       // 奇數長度的回文
        let len2 = expand_from_center(&chars, i, i + 1);   // 偶數長度的回文
        let len = len1.max(len2);

        if len > (end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }

    chars[start..=end].iter().collect()
}

fn expand_from_center(chars: &[char], mut left: usize, mut right: usize) -> usize {
    while left <= right && right < chars.len() && chars[left] == chars[right] {
        if left == 0 { break; }
        left -= 1;
        right += 1;
    }

    // 調整長度計算
    (right - left - 1).min(chars.len())
}
