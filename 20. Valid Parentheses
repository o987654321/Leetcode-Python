// ✅ 只定義一次 struct Solution
struct Solution;

// ✅ 所有功能放在一個 impl Solution 裡，或多個 impl 但 struct 只出現一次
impl Solution {
    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {
        fn find_bound(nums: &Vec<i32>, target: i32, is_first: bool) -> i32 {
            let mut left = 0;
            let mut right = nums.len() as i32 - 1;
            let mut bound = -1;

            while left <= right {
                let mid = left + (right - left) / 2;
                let mid_val = nums[mid as usize];

                if mid_val == target {
                    bound = mid;
                    if is_first {
                        right = mid - 1;
                    } else {
                        left = mid + 1;
                    }
                } else if mid_val < target {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            bound
        }

        let first = find_bound(&nums, target, true);
        if first == -1 {
            return vec![-1, -1];
        }
        let last = find_bound(&nums, target, false);
        vec![first, last]
    }

    pub fn is_valid(s: String) -> bool {
        let mut stack = Vec::new();

        for c in s.chars() {
            match c {
                '(' => stack.push(')'),
                '{' => stack.push('}'),
                '[' => stack.push(']'),
                ')' | '}' | ']' => {
                    if stack.pop() != Some(c) {
                        return false;
                    }
                }
                _ => return false,
            }
        }

        stack.is_empty()
    }
}
